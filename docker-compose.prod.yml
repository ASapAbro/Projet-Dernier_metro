# Docker Compose Production - API Dernier Metro Paris
# Version: 1.0.0
# Optimisé pour déploiement production avec sécurité renforcée

version: '3.8'

services:
  # === API PRODUCTION ===
  api:
    image: ghcr.io/asapabro/projet-dernier_metro:latest
    container_name: dernier-metro-api-prod
    restart: unless-stopped
    
    # Configuration réseau
    ports:
      - "127.0.0.1:3000:3000"  # Bind local seulement (reverse proxy)
    
    # Variables d'environnement
    environment:
      NODE_ENV: production
      PORT: 3000
      LOG_LEVEL: info
      LOG_FORMAT: json
      
      # Base de données (via secrets)
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD_FILE: /run/secrets/db_password
      DB_SSL: false
      DB_POOL_MIN: 2
      DB_POOL_MAX: 10
      
      # Sécurité
      CORS_ORIGIN: ${CORS_ORIGIN:-https://dernier-metro.fr}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX:-100}
      
      # Monitoring
      HEALTH_CHECK_INTERVAL: 30
      PROMETHEUS_ENABLED: true
    
    # Secrets Docker
    secrets:
      - db_password
      - jwt_secret
    
    # Volumes pour logs persistants
    volumes:
      - api_logs:/var/log/api
      - /etc/localtime:/etc/localtime:ro
    
    # Health check avancé
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Limites ressources
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    
    # Sécurité container
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    networks:
      - api_network

  # === BASE DE DONNÉES PRODUCTION ===
  postgres:
    image: postgres:15-alpine
    container_name: dernier-metro-db-prod
    restart: unless-stopped
    
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
      PGDATA: /var/lib/postgresql/data/pgdata
    
    secrets:
      - db_password
    
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:ro
      - /etc/localtime:/etc/localtime:ro
    
    # Configuration PostgreSQL optimisée
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c log_statement=errors
      -c log_min_duration_statement=1000
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Sécurité
    security_opt:
      - no-new-privileges:true
    
    networks:
      - api_network

  # === CACHE REDIS ===
  redis:
    image: redis:7-alpine
    container_name: dernier-metro-cache-prod
    restart: unless-stopped
    
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
    
    volumes:
      - redis_data:/data
      - /etc/localtime:/etc/localtime:ro
    
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    # Sécurité
    security_opt:
      - no-new-privileges:true
    
    networks:
      - api_network

  # === REVERSE PROXY NGINX ===
  nginx:
    image: nginx:1.25-alpine
    container_name: dernier-metro-proxy-prod
    restart: unless-stopped
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      - /etc/localtime:/etc/localtime:ro
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    depends_on:
      - api
    
    networks:
      - api_network

  # === MONITORING PROMETHEUS ===
  prometheus:
    image: prom/prometheus:latest
    container_name: dernier-metro-prometheus
    restart: unless-stopped
    
    ports:
      - "127.0.0.1:9090:9090"
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    
    networks:
      - api_network

# === SECRETS DOCKER ===
secrets:
  db_password:
    file: ./secrets/db_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt

# === VOLUMES PERSISTANTS ===
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/dernier-metro/data/postgres
  
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/dernier-metro/data/redis
  
  api_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/dernier-metro/logs
  
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/dernier-metro/logs/nginx
  
  prometheus_data:
    driver: local

# === RÉSEAU ISOLÉ ===
networks:
  api_network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: dernier-metro-br0
    ipam:
      config:
        - subnet: 172.20.0.0/24
